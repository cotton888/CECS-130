/*Ethan Turner

Final Project
3D Tic Tac Toe Comp vs. Comp.

*/

#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;

class Boardtype
{
	//members
	public:
	int aiscore;
	int userscore;
	int computermove;
	string *slot;
	

	//function
	void computerturn();
	void userturn();
	void boardcheck();

	//constructor
	//initializing as null
	Boardtype()
	{
		slot=new string[27];
	}
~Boardtype(){
}
};

void Boardtype::computerturn()
{
	int illegal=1;

	while(illegal==1)
	{
		computermove = rand()%27+1; //generating random number from 1 to 27
		switch(computermove)  //using switch statement to mark the randomly generated position
		{
			case 1:
				if(slot[1].empty()) //if position is empty, then proceed to mark
				{
					slot[1]="O";
					illegal=0; //set "illegal" to 0 to exit while loop
				}
				break;
			case 2:
				if(slot[2].empty())
				{
					slot[2]="O";
					illegal=0;
				}
				break;
			case 3:
				if(slot[3].empty())
				{
					slot[3]="O";
					illegal=0;
				}
				break;
			case 4:
				if(slot[4].empty())
				{
					slot[4]="O";
					illegal=0;
				}
				break;
			case 5:
				if(slot[5].empty())
				{
					slot[5]="O";
					illegal=0;
				}
				break;
			case 6:
				if(slot[6].empty())
				{
					slot[6]="O";
					illegal=0;
				}
				break;
			case 7:
				if(slot[7].empty())
				{
					slot[7]="O";
					illegal=0;
				}
				break;
			case 8:
				if(slot[8].empty())
				{
					slot[8]="O";
					illegal=0;
				}
				break;
			case 9:
				if(slot[9].empty())
				{
					slot[9]="O";
					illegal=0;
				}
				break;
			case 10:
				if(slot[10].empty())
				{
					slot[10]="O";
					illegal=0;
				}
				break;
			case 11:
				if(slot[11].empty())
				{
					slot[11]="O";
					illegal=0;
				}
				break;
			case 12:
				if(slot[12].empty())
				{
					slot[12]="O";
					illegal=0;
				}
				break;
			case 13:
				if(slot[13].empty())
				{
					slot[13]="O";
					illegal=0;
				}
				break;
			case 14:
				if(slot[14].empty())
				{
					slot[14]="O";
					illegal=0;
				}
				break;
			case 15:
				if(slot[15].empty())
				{
					slot[15]="O";
					illegal=0;
				}
				break;
			case 16:
				if(slot[16].empty())
				{
					slot[16]="O";
					illegal=0;
				}
				break;
			case 17:
				if(slot[17].empty())
				{
					slot[17]="O";
					illegal=0;
				}
				break;
			case 18:
				if(slot[18].empty())
				{
					slot[18]="O";
					illegal=0;
				}
				break;
			case 19:
				if(slot[19].empty())
				{
					slot[19]="O";
					illegal=0;
				}
				break;
			case 20:
				if(slot[20].empty())
				{
					slot[20]="O";
					illegal=0;
				}
				break;
			case 21:
				if(slot[21].empty())
				{
					slot[21]="O";
					illegal=0;
				}
				break;
			case 22:
				if(slot[22].empty())
				{
					slot[22]="O";
					illegal=0;
				}
				break;
			case 23:
				if(slot[23].empty())
				{
					slot[23]="O";
					illegal=0;
				}
				break;
			case 24:
				if(slot[24].empty())
				{
					slot[24]="O";
					illegal=0;
				}
				break;
			case 25:
				if(slot[25].empty())
				{
					slot[25]="O";
					illegal=0;
				}
				break;
			case 26:
				if(slot[26].empty())
				{
					slot[26]="O";
					illegal=0;
				}
				break;
			case 27:
				if(slot[0].empty())
				{
					slot[0]="O";
					illegal=0;
				}
				break;

		}
	}
}



class Board
{
	public:
	int *board;
	int i;
	int z;
	
	int player_1score;
	int player_2score;
	
	void score();
	int board_check();
	void computer();
	void player();
	Board()
	{
		player_1score=0;
		player_2score=0;
		board=new int[27];
		for(i=0;i<27;i++)
		{
			board[i]=0;
		}
	}
	~Board()
	{}	
	
	void board_draw(bool initial)
	{	
		system("CLS");
		cout<<"Computer1-Shen X	Computer2-Ethan O\n\n";
		
		int k=0;
		for(z=1;z<10;z++)
		{
			
			for(i=0;i<3;i++)
			{
				if(board[k]==0)
				{
					cout<<" ";
					k++;
				}
				else if(board[k]==3)
				{
					cout<<"X";
					k++;
				}
				else if(board[k]==5)
				{
					cout<<"O";
					k++;
				}
				if(i<2)
				{
					cout<<" | ";
					continue;
				}
				if(i==2 && (z%3!=0))
				{
					cout<<"\n----------\n";
					continue;
				}
				else
				{
					cout<<"\n\n\n";
				}

			}

		}
	//system("pause");
	return;
	}
	
	void board_clear()
	{
		for(i=0;i<27;i++)
		{
			board[i]=0;
		}
	}
};

	
int Board::board_check()
{
	int checksum;

	for(i=0;i<=24;(i+=3))		//flat horizontal check
	{
		checksum=board[i]+board[i+1]+board[i+2];
		if(checksum==9 || checksum==15)
		{
			return checksum;
		}
	}
	for(i=0;i<=20;i++)	//vertical flat
	{
		checksum=board[i]+board[i+3]+board[i+6];
		if((i+1)%3==0)
		{
			i+=7;
		}
		if(checksum==9 || checksum==15)
		{
			return checksum;
		}
	}

	for(i=0;i<=20;i+=7)	//flat diagonal
	{
		checksum=board[i]+board[i+4]+board[i+8];
		if(checksum==9 || checksum==15)
		 {
			return checksum;
		}
		i+=2;
		checksum=board[i]+board[i+2]+board[i+4];
		if(checksum==9 || checksum==15)
		{
			return checksum;
		}
	}
	
	for(i=0;i<=8;i++)	//vertical
	{
		checksum=board[i]+board[i+9]+board[i+18];
		if(checksum==9 || checksum==15)
		{
			return checksum;
		}
	}
	
	for(i=0;i<=8;i+=4)	//double diagonals
	{
		checksum=board[i]+board[13]+board[26-i];
		if(checksum==9 || checksum==15)
		{
			return checksum;
		}
		i+=2;
		checksum=board[i]+board[13]+board[26-i];
		if(checksum==9 || checksum==15)
		{
			return checksum;
		}
	}
	
	for(i=0;i<=8;i++)	//horizontal diagonals
	{
		checksum=board[i]+board[i+10]+board[i+20];
		if(checksum==9 || checksum==15)
			{
				return checksum;
			}
		i+=2;
		checksum=board[i]+board[i+8]+board[i+16];
		if(checksum==9 || checksum==15)
			{
				return checksum;
			}
	}
	
	for(i=0;i<=2;i++)
	{
		checksum=board[i]+board[i+12]+board[i+24];
		if(checksum==9 || checksum==15)
		{
			return checksum;
		}
	}
	for(i=6;i<=8;i++)
	{
		checksum=board[i]+board[i+6]+board[i+12];
		if(checksum==9 || checksum==15)
		{
			return checksum;
		}
	}
}

class computer
{
	int i;
	
	public:

	int score;
	bool first_turn;
	computer()
	{
		score=0;
		first_turn=true;
	}
	
	int move(Board board_3)
	{
		if (first_turn)
		{
			do
			{
				i=(rand()/(RAND_MAX/26+1));
			}while(board_3.board[i]!=0);
			board_3.board[i]=5;
			
		}
		return i;
		
	}
};
	



class player
{
	public:
		int score;
		void playerturn(Board board2)
		{
			int selection;
			do
			{
				cout<<"enter square:";
				cin>>selection;
			}while(board2.board[selection-1]!=0);
		
		board2.board[selection-1]=3;
		}
};


class competition: public computer, public Boardtype
{
	public:
	int score_1;
	int score_2;
	int j;
	int x;
	int game_count;
	competition()
	{
		x=rand()%2;
		score_1=0;
		score_2=0;
	}
	
	void conversion(int player, Board board_3);
	
	void game(int y,Board board_3)
	{
		j=0;
		if(y==0)
		{
		j=move(board_3);
		conversion(0,board_3);
		board_3.board_draw(false);
		j=board_3.board_check();
		}
		if(y==1)
		{
		computerturn();
		conversion(1,board_3);
		board_3.board_draw(false);
		j=board_3.board_check();
		}
		if(j!=0)
		{
			if(j==9)
			{
				score_1+=1;
				cout<<"Computer1-Shen Wins Game\n\n";
			}
			if(j==15)
			{	
				score_2+=1;
				cout<<"Computer2-Ethan Wins Game\n\n";
			}
			game_count+=1;
			cout<<"\t\tSCORE\n" <<"Computer1-Shen:"<<score_1<<"\t"<<"Computer2-Ethan:"<<score_2<<"\n";
			if(game_count==10)
			{
				game_count=0;
				if(score_1>score_2)
				{
					cout<<"Computer1-Shen Wins Match\n";
				}
				if(score_1<score_2)
				{
					cout<<"Computer2-Ethan Wins Match\n";
				}
				if(score_1==score_2)
				{
					cout<<"Draw\n";
				}
				
				system("pause");
				exit(0);
			}
			
			board_3.board_clear();
			for(j=0;j<27;j++)
			{
				slot[j].clear();
			}
			system("pause");
			
		}
	}
};

void competition::conversion(int player,Board board_3)
{
	if(player==0)
	{
			slot[j]="0";
	}
	if(player==1)
	{
		board_3.board[computermove]=3;
	}
}


Board board_1;
player player_1;
computer comp_1;
competition competition_1;
int i;
bool running=true;

int main()
{
	srand(time(NULL));
	board_1.board_draw(true);
	system("pause");
	while(running)
		{				
			competition_1.game(0,board_1);
			competition_1.game(1,board_1);
		}
}








